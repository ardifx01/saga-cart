// Code generated by MockGen. DO NOT EDIT.
// Source: internal/contracts/product_contracts.go
//
// Generated by this command:
//
//	mockgen -source=internal/contracts/product_contracts.go -destination=mocks/contracts/product_service_contract_mock.go -exclude_interfaces=ProductRepoContract
//

// Package mock_contracts is a generated GoMock package.
package mock_contracts

import (
	domain "product_service_saga/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProductServiceContract is a mock of ProductServiceContract interface.
type MockProductServiceContract struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceContractMockRecorder
	isgomock struct{}
}

// MockProductServiceContractMockRecorder is the mock recorder for MockProductServiceContract.
type MockProductServiceContractMockRecorder struct {
	mock *MockProductServiceContract
}

// NewMockProductServiceContract creates a new mock instance.
func NewMockProductServiceContract(ctrl *gomock.Controller) *MockProductServiceContract {
	mock := &MockProductServiceContract{ctrl: ctrl}
	mock.recorder = &MockProductServiceContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductServiceContract) EXPECT() *MockProductServiceContractMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockProductServiceContract) FindByID(id int) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockProductServiceContractMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockProductServiceContract)(nil).FindByID), id)
}

// GetProducts mocks base method.
func (m *MockProductServiceContract) GetProducts() ([]*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts")
	ret0, _ := ret[0].([]*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockProductServiceContractMockRecorder) GetProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockProductServiceContract)(nil).GetProducts))
}
