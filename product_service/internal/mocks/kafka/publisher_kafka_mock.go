// Code generated by MockGen. DO NOT EDIT.
// Source: internal/kafka/publisher.go
//
// Generated by this command:
//
//	mockgen -source=internal/kafka/publisher.go -destination=mocks/kafka/publisher_kafka_mock.go
//

// Package mock_kafka is a generated GoMock package.
package mock_kafka

import (
	context "context"
	reflect "reflect"

	kafka "github.com/segmentio/kafka-go"
	gomock "go.uber.org/mock/gomock"
)

// MockIKafka is a mock of IKafka interface.
type MockIKafka struct {
	ctrl     *gomock.Controller
	recorder *MockIKafkaMockRecorder
	isgomock struct{}
}

// MockIKafkaMockRecorder is the mock recorder for MockIKafka.
type MockIKafkaMockRecorder struct {
	mock *MockIKafka
}

// NewMockIKafka creates a new mock instance.
func NewMockIKafka(ctrl *gomock.Controller) *MockIKafka {
	mock := &MockIKafka{ctrl: ctrl}
	mock.recorder = &MockIKafkaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKafka) EXPECT() *MockIKafkaMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIKafka) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIKafkaMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIKafka)(nil).Close))
}

// WriteMessages mocks base method.
func (m *MockIKafka) WriteMessages(ctx context.Context, msgs ...kafka.Message) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range msgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteMessages", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessages indicates an expected call of WriteMessages.
func (mr *MockIKafkaMockRecorder) WriteMessages(ctx any, msgs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, msgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessages", reflect.TypeOf((*MockIKafka)(nil).WriteMessages), varargs...)
}
