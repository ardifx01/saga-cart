// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/product_repo.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/product_repo.go -destination=mocks/repository/product_repo_mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockIGorm is a mock of IGorm interface.
type MockIGorm struct {
	ctrl     *gomock.Controller
	recorder *MockIGormMockRecorder
	isgomock struct{}
}

// MockIGormMockRecorder is the mock recorder for MockIGorm.
type MockIGormMockRecorder struct {
	mock *MockIGorm
}

// NewMockIGorm creates a new mock instance.
func NewMockIGorm(ctrl *gomock.Controller) *MockIGorm {
	mock := &MockIGorm{ctrl: ctrl}
	mock.recorder = &MockIGormMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGorm) EXPECT() *MockIGormMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockIGorm) Find(dest any, conds ...any) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []any{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockIGormMockRecorder) Find(dest any, conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIGorm)(nil).Find), varargs...)
}

// First mocks base method.
func (m *MockIGorm) First(dest any, conds ...any) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []any{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockIGormMockRecorder) First(dest any, conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockIGorm)(nil).First), varargs...)
}
