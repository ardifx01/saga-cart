// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/order_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/order_service.go -destination=internal/mocks/order/order_publisher_mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIOrderPublisher is a mock of IOrderPublisher interface.
type MockIOrderPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderPublisherMockRecorder
	isgomock struct{}
}

// MockIOrderPublisherMockRecorder is the mock recorder for MockIOrderPublisher.
type MockIOrderPublisherMockRecorder struct {
	mock *MockIOrderPublisher
}

// NewMockIOrderPublisher creates a new mock instance.
func NewMockIOrderPublisher(ctrl *gomock.Controller) *MockIOrderPublisher {
	mock := &MockIOrderPublisher{ctrl: ctrl}
	mock.recorder = &MockIOrderPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderPublisher) EXPECT() *MockIOrderPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockIOrderPublisher) Publish(topic string, message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", topic, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockIOrderPublisherMockRecorder) Publish(topic, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIOrderPublisher)(nil).Publish), topic, message)
}
