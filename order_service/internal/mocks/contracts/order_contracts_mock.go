// Code generated by MockGen. DO NOT EDIT.
// Source: internal/contracts/order_contracts.go
//
// Generated by this command:
//
//	mockgen -source=internal/contracts/order_contracts.go -destination=internal/mocks/contracts/order_contracts_mock.go
//

// Package mock_contracts is a generated GoMock package.
package mock_contracts

import (
	domain "order_service_saga/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderRepoContract is a mock of OrderRepoContract interface.
type MockOrderRepoContract struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoContractMockRecorder
	isgomock struct{}
}

// MockOrderRepoContractMockRecorder is the mock recorder for MockOrderRepoContract.
type MockOrderRepoContractMockRecorder struct {
	mock *MockOrderRepoContract
}

// NewMockOrderRepoContract creates a new mock instance.
func NewMockOrderRepoContract(ctrl *gomock.Controller) *MockOrderRepoContract {
	mock := &MockOrderRepoContract{ctrl: ctrl}
	mock.recorder = &MockOrderRepoContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepoContract) EXPECT() *MockOrderRepoContractMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderRepoContract) CreateOrder(arg0 domain.Order) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepoContractMockRecorder) CreateOrder(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepoContract)(nil).CreateOrder), arg0)
}

// GerOrders mocks base method.
func (m *MockOrderRepoContract) GerOrders() (*[]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GerOrders")
	ret0, _ := ret[0].(*[]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GerOrders indicates an expected call of GerOrders.
func (mr *MockOrderRepoContractMockRecorder) GerOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GerOrders", reflect.TypeOf((*MockOrderRepoContract)(nil).GerOrders))
}

// UpdateOrderStatus mocks base method.
func (m *MockOrderRepoContract) UpdateOrderStatus(arg0 int, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockOrderRepoContractMockRecorder) UpdateOrderStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockOrderRepoContract)(nil).UpdateOrderStatus), arg0, arg1)
}

// MockOrderServiceContract is a mock of OrderServiceContract interface.
type MockOrderServiceContract struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceContractMockRecorder
	isgomock struct{}
}

// MockOrderServiceContractMockRecorder is the mock recorder for MockOrderServiceContract.
type MockOrderServiceContractMockRecorder struct {
	mock *MockOrderServiceContract
}

// NewMockOrderServiceContract creates a new mock instance.
func NewMockOrderServiceContract(ctrl *gomock.Controller) *MockOrderServiceContract {
	mock := &MockOrderServiceContract{ctrl: ctrl}
	mock.recorder = &MockOrderServiceContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServiceContract) EXPECT() *MockOrderServiceContractMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderServiceContract) CreateOrder(arg0 domain.Order) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderServiceContractMockRecorder) CreateOrder(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderServiceContract)(nil).CreateOrder), arg0)
}

// GerOrders mocks base method.
func (m *MockOrderServiceContract) GerOrders() (*[]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GerOrders")
	ret0, _ := ret[0].(*[]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GerOrders indicates an expected call of GerOrders.
func (mr *MockOrderServiceContractMockRecorder) GerOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GerOrders", reflect.TypeOf((*MockOrderServiceContract)(nil).GerOrders))
}
